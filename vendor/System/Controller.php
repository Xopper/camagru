<?php

namespace System;

abstract class Controller
{
	protected $app;

	public function __construct(Application $app)
	{
		$this->app = $app;
	}

	public function __get($key)
	{
		return $this->app->get($key);
	}

	/**
	 * Generate errors after validation inputs
	 * 
	 * @param array $errors | generated by Validator class.
	 * @param array $customErrorMessages | custom error messages.
	 * @return array
	 */
	protected function generateErrors($errors, $customErrorMessages)
	{
		$messages = $customErrorMessages;

		$attrs = array_keys($errors);
		$attrs = implode(':', $attrs);
		$attrs = str_replace('_', '', $attrs);
		$attrs = explode(':', $attrs);

		$customisedErrors = [];
		$messages_keys = array_keys($messages);
		$messages_values = array_values($messages);

		for ($i = 0; $i < count($attrs); $i++){
			$flag = false;
			for ($j = 0; $j < count($messages_keys); $j++){
				if (strpos($messages_keys[$j], $attrs[$i]) === 0){
					list($attr, $rule) = explode(".", $messages_keys[$j]);
					if (strpos($errors['_' . $attr], $rule) === 0)
					{
						$customisedErrors['_' . $attr] = $messages_values[$j];
						$flag = true;
					}
				}
			}
			if (!$flag){
				list($rule, $error) = explode("|", $errors['_' . $attrs[$i]]);
				$customisedErrors['_' . $attrs[$i]] = $error;
			}
		}
		return $customisedErrors;
	}

	/**
	 * return an error json response if there is some errors
	 * 
	 * @return json
	 */
	protected function manageErrors($CSRFflag, $from_schema, $errors, $customErrorMessages)
	{
		if ($CSRFflag == false){
			$json = json_encode([
				'ok' => false,
				'csrf' => $CSRFflag,
				'redirect' => '/',
			]);
			$this->session->set('flash', ['danger' => 'CSRF token mismatch :/']);
			$this->csrf->unsetCSRFToken();
		} else {
			$customisedErrors = [];
			$customisedErrors = $this->generateErrors($errors, $customErrorMessages);
			$json = json_encode([
				'ok' => false,
				'errors' => $customisedErrors,
				'passed' => passed($from_schema, $customisedErrors),
				'csrf' => $CSRFflag,
			]);
		}
		echo $json;
	}

	/**
	 * form rules to be followed
	 * 
	 * @return array
	 */
	protected function rules(){
		return [];
	}

	/** 
	 * Set the error messages for the defined validation rules.
	 * 
	 * @return array
	*/
	protected function messages()
	{
		return [];
	}
}
